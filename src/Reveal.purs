module Reveal where

import Prelude
import Data.Foldable (foldMap)
import Data.List
import Control.Monad.Eff (Eff)
import Control.Monad.Eff.Console (CONSOLE, log)
import Control.Monad.Eff.Exception.Unsafe (unsafeThrow)

import Text.Smolder.HTML (Html)
import Text.Smolder.HTML as Html
import Text.Smolder.HTML.Attributes as Html
import Text.Smolder.Markup
import Text.Smolder.Renderer.String as Smolder

error = unsafeThrow

--------------------------------------------------------------------------------
-- * A mostly shallow embedding

type RevealOpts = { styles :: Array String, script :: String }

-- | A complete slideshow
data Deck = Deck (Array Section)

instance deckMonoid :: Monoid Deck where
  mempty = Deck []
  Deck a `mappend` Deck b = Deck (a <> b)

-- only one level of nesting allowed
data Section
  = Single Slide
  | Section (Array Slide)   -- ^ A subsection, with a list of vertical slides

-- A slide is really just a piece of HTML
data Slide = Slide SlidePiece

type SlidePiece = Markup

-- TODO: write this as a Typed Tagless Final embedding

-- TODO: collapsing all three types into a sum type will allow for us to write a
-- Monoid instance for Slideshow, but we will lose the guarantees that this
-- hierarchy enforces (i.e. possible to have 'Deck' inside a 'Section')

-- * Combinators and slide elements

infix 5 vcat as  <==>
--infix 5 hcat as  <||>
-- infix 5 nest as  <%>


vcat :: SlidePiece -> SlidePiece -> SlidePiece
vcat = (*>)

-- hcat :: Slide -> Slide -> Slide
-- hcat =  error "TODO"

-- nest :: Slide -> Slide -> Slide
-- nest =  error "TODO"

title :: String -> SlidePiece
title =  Html.h1 <<< text

subtitle :: String -> SlidePiece
subtitle = Html.h2 <<< text

-- bullets :: String -> Slide
-- bullets =  error "TODO"

-- -- filepath
-- image :: String -> Slide
-- image =  error "TODO"

--------------------------------------------------------------------------------
-- * Default templates

-- TODO: Include this in the 'Deck' data type? Autogenerated footers, title
-- slide, etc?
type SlideMeta =
  { title       :: String
  , subtitle    :: Maybe String
  , venue       :: Maybe String
  , date        :: Maybe String
  , author      :: String
  , affiliation :: Maybe String
  }

-- | A default blank metadata struct
meta :: SlideMeta
meta =
  { title       = ""
  , subtitle    = Nothing
  , venue       = Nothing
  , date        = Nothing
  , author      = ""
  , affiliation = Nothing
  }

titleSlide :: SlideMeta -> Slide
titleSlide meta = Slide $ do
  title meta.title
 -- subtitle meta.subtitle
  author meta.author

bulletSlide :: String -> SlidePiece -> Slide

fullImageSlide :: FilePath -> Slide

slide :: Slide -> Section
slide = Single <<< Slide

--------------------------------------------------------------------------------
-- * Compile

contain :: RevealOpts -> Html -> Html
contain opts slides = do
  Html.head $ buildStyles opts.styles
  Html.body $ slides <> script
  where
    script = (Html.script ! Html.src opts.script $ pure unit)
          <> (Html.script $ text "Reveal.initialize();")

    buildStyles = foldMap (\s -> Html.link ! (Html.rel "stylesheet" <> Html.href s))

topLevel :: Html -> Html
topLevel = (Html.div ! Html.className "reveal") <<<
             (Html.div ! Html.className "slides")

section :: Slide -> Html
section = parent "section"

renderHtml :: RevealOpts -> Deck -> Html
renderHtml opts (Deck d) = contain opts $ topLevel $ foldMap renderSection d
  where
    renderSection :: Section -> Html
    renderSection (Single s) = section s
    renderSection (Section ss) = section $ foldMap section ss

    renderSlide :: Slide -> Html
    renderSlide = section

renderString :: RevealOpts -> Deck -> String
renderString opts = Smolder.render <<< renderHtml opts

--------------------------------------------------------------------------------
-- * Test

sampleDeck :: Deck
sampleDeck = Deck
  [ slide $ titleSlide (meta { title  = "Monoids for functional programming"
                             , author = "Matt Chan"
                             , venue  = "Awake Networks"
                             })

  , slide $ title "Example"
                   <==>
            subtitle "This is an example"
  ]

defOpts :: RevealOpts
defOpts = { styles: ["css/reveal.css", "css/theme/white.css"]
          , script: "js/reveal.js"
          }

main :: forall e. Eff (console :: CONSOLE | e) Unit
main = do
  log $ renderString defOpts sampleDeck
