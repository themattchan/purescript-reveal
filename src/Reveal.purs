module Reveal where

import Prelude
import Data.List
import Data.Maybe
import Node.FS (FS)
import Node.FS.Sync
import Node.Path (FilePath())
import Node.Encoding as Enc
import Text.Smolder.Markup
import Text.Smolder.HTML (Html)
import Text.Smolder.HTML as Html
import Text.Smolder.HTML.Attributes as Html
import Text.Smolder.Renderer.String as Smolder
import Control.Monad.Eff (Eff)
import Control.Monad.Eff.Console (CONSOLE, log)
import Control.Monad.Eff.Exception (catchException)
import Control.Monad.Eff.Exception.Unsafe (unsafeThrow)
import Data.Foldable (foldMap)
import Data.Monoid (mempty, class Monoid)

error = unsafeThrow

--------------------------------------------------------------------------------
-- * A mostly shallow embedding

type RevealOpts = { styles :: Array String, scripts :: Array String }

-- | A complete slideshow
data Deck = Deck (Array Section)

instance deckSemigroup :: Semigroup Deck where
  append (Deck a) (Deck b) = Deck (append a b)

instance deckMonoid :: Monoid Deck where
  mempty = Deck []

-- only one level of nesting allowed
data Section
  = Single Slide
  | Section (Array Slide)   -- ^ A subsection, with a list of vertical slides

-- A slide is really just a piece of HTML
data Slide = Slide SlidePiece

type SlidePiece = Markup

-- TODO: write this as a Typed Tagless Final embedding

-- TODO: collapsing all three types into a sum type will allow for us to write a
-- Monoid instance for Slideshow, but we will lose the guarantees that this
-- hierarchy enforces (i.e. possible to have 'Deck' inside a 'Section')

-- * Combinators and slide elements

infix 5 vcat as  <==>
--infix 5 hcat as  <||>
-- infix 5 nest as  <%>


vcat :: SlidePiece -> SlidePiece -> SlidePiece
vcat = (*>)

-- hcat :: Slide -> Slide -> Slide
-- hcat =  error "TODO"

-- nest :: Slide -> Slide -> Slide
-- nest =  error "TODO"

title :: String -> SlidePiece
title =  Html.h1 <<< text

subtitle :: String -> SlidePiece
subtitle = Html.h2 <<< text

author :: String -> SlidePiece
author = Html.h2 <<< text

-- bullets :: String -> Slide
-- bullets =  error "TODO"

-- -- filepath
-- image :: String -> Slide
-- image =  error "TODO"

--------------------------------------------------------------------------------
-- * Default templates

-- TODO: Include this in the 'Deck' data type? Autogenerated footers, title
-- slide, etc?
type SlideMeta =
  { title       :: String
  , subtitle    :: Maybe String
  , venue       :: Maybe String
  , date        :: Maybe String
  , author      :: String
  , affiliation :: Maybe String
  }

-- | A default blank metadata struct
meta :: SlideMeta
meta =
  { title       : ""
  , subtitle    : Nothing
  , venue       : Nothing
  , date        : Nothing
  , author      : ""
  , affiliation : Nothing
  }

titleSlide :: SlideMeta -> Slide
titleSlide m = Slide $ do
  title m.title
 -- subtitle meta.subtitle
  author m.author

-- bulletSlide :: String -> SlidePiece -> Slide

-- fullImageSlide :: FilePath -> Slide

slide :: SlidePiece -> Section
slide = Single <<< Slide

--------------------------------------------------------------------------------
-- * Compile

container :: RevealOpts -> Html -> Html
container opts slides = do
  Html.html $ do
    Html.head $ do
      Html.meta ! Html.charset "utf-8"
      Html.meta ! Html.name "viewport" ! Html.content "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
      buildStyles opts.styles
    Html.body $ do
      topLevel slides
      script
  where
    buildStyles = foldMap (\s -> Html.link ! (Html.rel "stylesheet" <> Html.href s))

    topLevel = (Html.div ! Html.className "reveal") <<<
                 (Html.div ! Html.className "slides")

    script = (foldMap (\s -> (Html.script ! Html.src s $ text mempty)) opts.scripts)
          <> (Html.script $ text "Reveal.initialize();")

section :: Html -> Html
section = parent "section"

renderHtml :: RevealOpts -> Deck -> Html
renderHtml opts (Deck d) = container opts $ foldMap renderSection d
  where
    renderSection :: Section -> Html
    renderSection (Single s) = renderSlide s
    renderSection (Section ss) = section $ foldMap renderSlide ss

    renderSlide :: Slide -> Html
    renderSlide (Slide s) = section s

renderString :: RevealOpts -> Deck -> String
renderString opts = Smolder.render <<< renderHtml opts

--------------------------------------------------------------------------------
-- * Test

sampleDeck :: Deck
sampleDeck = Deck
  [ Single $ titleSlide (meta { title  = "Monoids for functional programming"
                              , author = "Matt Chan"
                              , venue  = pure "Awake Networks"
                              })

  , slide $ title "Example"
                   <==>
            subtitle "This is an example"
  ]

defOpts :: RevealOpts
defOpts = { styles: ["css/reveal.css", "css/theme/simple.css", "lib/css/zenburn.css"]
          , scripts: ["js/reveal.js", "lib/js/head.min.js"]
          }

renderTo :: forall e. FilePath -> Eff (fs :: FS, console :: CONSOLE | e) Unit
renderTo outfile = do
  let rendered = renderString defOpts sampleDeck
  log $ rendered
  catchException (\e -> log "write failed") $
    writeTextFile Enc.UTF8 outfile rendered
